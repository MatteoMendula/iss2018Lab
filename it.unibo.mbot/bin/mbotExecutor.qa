/* 
 * =======================================================================================
 * mbotExecutor.qa
 * A robot called rover is able to execute move commands in a (real + virtual) environment.
 * A more modular version is desirable.
 * 
 * WARNING: this module must be ALWAYS compiled before run it (shared classes in libraries)
 * =======================================================================================
 */        
System mbotExecutor            
Event usercmd     : usercmd(CMD)  					//from web gui
Event sonar  	  : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar   : sonar( DISTANCE )				//From real sonar on real robot
Event    polar    : p( Distance, Angle )  
   
Dispatch moveRover : cmd( CMD )   					//from usercmdmanager  
  
Context ctxMbotExecutor ip [ host="localhost"   port=8029 ]  -httpserver     
Context ctxRadarBase    ip [ host="localhost"   port=8033 ]  -standalone 	 
  
/*   
 * -----------------------------------------------------
 * The usercmdmanager handles commands sent by the user 
 * -----------------------------------------------------
 */ 
QActor usercmdmanager context ctxMbotExecutor { 
	Plan init normal[ ]
  	transition stopAfter 3600000   	//1h   
 		whenEvent usercmd   -> execMove  
    	finally repeatPlan   
  	
  	Plan execMove resumeLastPlan[     
     	onEvent usercmd :  usercmd( robotgui(w(X)) ) -> forward rover -m moveRover : cmd(moveForward);    
    	onEvent usercmd :  usercmd( robotgui(s(X)) ) -> forward rover -m moveRover : cmd(moveBackward);  
  		onEvent usercmd :  usercmd( robotgui(a(X)) ) -> forward rover -m moveRover : cmd(turnLeft);   
   		onEvent usercmd :  usercmd( robotgui(d(X)) ) -> forward rover -m moveRover : cmd(turnRight);   
   		onEvent usercmd :  usercmd( robotgui(h(X)) ) -> forward rover -m moveRover : cmd(moveStop);  
    	onEvent usercmd :  usercmd( robotgui(f(X)) ) -> forward rover -m moveRover : cmd(followLine);        
    	onEvent usercmd :  usercmd( robotgui(x(X)) ) -> { //action sequence
    		forward rover -m moveRover : cmd(moveStop); 
			actorOp terminateSystem
    	} ;
    	onEvent usercmd :  usercmd( robotgui(unityAddr(X)) )  -> 
    													forward rover -m moveRover : cmd(connectToUnity)  
    ] 
}

/*   
 * -----------------------------------------------------
 * The rover is a an interpreter of command messages
 * -----------------------------------------------------
 */  
QActor rover context ctxMbotExecutor {   
	Rules{	  //onRaspberry. 
		      unityConfig("localhost", "unityStart.bat").    //(1) for testing
		      //unityConfig("192.168.43.229", "").  		 //(2) if onRaspberry is on
	}
	Plan init normal [       
 	    [ !? onRaspberry] javaRun it.unibo.rover.mbotConnArduino.initRasp()	;
	    println("rover START")    
  	] 
    switchTo waitForCmd        
		
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h  
 		whenMsg moveRover   -> execMove 
 
  	Plan execMove resumeLastPlan[     
  		printCurrentMessage;
    	onMsg moveRover : cmd(moveForward)    -> javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("forward","40","0");     
    	onMsg moveRover : cmd(moveBackward)   -> javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("backward","40","0");  
  		onMsg moveRover : cmd(turnLeft)       -> {
	 		javaRun it.unibo.rover.mbotConnArduino.mbotLeft();
			[ !? unityOn ] left 40 time(750) else delay 900;
	 		javaRun it.unibo.rover.mbotConnArduino.mbotStop()	 			
  		};   
   		onMsg moveRover : cmd(turnRight)      -> {
			javaRun it.unibo.rover.mbotConnArduino.mbotRight();
			[ !? unityOn ] right 40 time(750) else  delay 900;
	 		javaRun it.unibo.rover.mbotConnArduino.mbotStop()   			
   		} ;   
   		onMsg moveRover : cmd(moveStop)       -> javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("stop","40","0")  ; 
   		onMsg moveRover : cmd(connectToUnity)  -> {  			
   			 [ not !? unityOn ] {
   			 	//activate Unity [ only in case (1) ], else simply connect to UNITYADDR:6000
				[ !? unityConfig(UNITYADDR, BATCH) ] 
  		 				javaRun it.unibo.utils.external.connectRoverToUnity( UNITYADDR, BATCH ) ;
  		 		addRule unityOn  ;  			 	
     			//setAvatarInitialPosition
		     	 backwards 70 time ( 1000 ) ;    	   
		   	     right     70 time ( 1000 )  
   		 	}else println("UNITY ALREADY ACTIVE")
   		 };
   		onMsg moveRover : cmd(followLine)     -> javaRun it.unibo.rover.mbotConnArduino.mbotLinefollow()     
   	]   
   	switchTo waitForCmd         
}    

/*
 * -----------------------------------------------------
 * Convert sonar events into polar events
 * -----------------------------------------------------
 */
QActor sonardetector context ctxMbotExecutor{
	Plan init normal [
		println("sonardetector STARTS ")
	]
	switchTo waitForEvents
	
	Plan waitForEvents[ ]    
  	transition stopAfter 3600000   	//1h     
 		whenEvent sonar       ->  sendToRadar,
  		whenEvent sonarDetect ->  showObstcle,
 		whenEvent realSonar   ->  handleRealSonar
  	finally repeatPlan  
	  
	Plan sendToRadar resumeLastPlan [      
  		printCurrentEvent; 		
		onEvent sonar  : sonar(sonar1, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,30) ;
		onEvent sonar  : sonar(sonar2, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,120) 
 	] 	
 	Plan handleRealSonar resumeLastPlan[ 
 		printCurrentEvent; 		
		onEvent realSonar   : sonar( DISTANCE ) -> emit polar : p(DISTANCE, 0) 
 	]
	Plan showObstcle resumeLastPlan[
		println( "found obstacle" );		
		emit polar : p(30,90)  
	]
}
