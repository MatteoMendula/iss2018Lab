/* 
 * ==============================================================
 * mbotControl.qa
 * ==============================================================
 */       
System mbotControl              
Event usercmd     : usercmd(CMD)  
Event sonar  	  : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar   : sonar( DISTANCE )				//From real sonar on real robot
Event    polar    : p( Distance, Angle )
Event unityAddr   : unityAddr( ADDR )				//From user interface
  
Context ctxMbotControl ip [ host="192.168.43.67"   port=8029 ] -httpserver   
 
QActor rover context ctxMbotControl {   
	Rules{
		unityAddr("192.168.43.229").
		unityRemote(ADDR) :- unityAddr("localhost"), !, fail.
		unityRemote(ADDR) :- unityOn, !, fail.
		unityRemote(ADDR) :- unityAddr(ADDR).
		
		foundObstacle :- retract( realDistance(D) ), eval( lt, D, 20 ).
	}
	Plan init normal [       
	    	println("rover START")    ;
	    	javaRun it.unibo.rover.mbotConnArduino.initRasp()	
  	    ] 
	    switchTo waitUserCmd        
		
   	Plan waitUserCmd[  	]  
  	transition stopAfter 3600000   	//1h 
 		whenEvent usercmd   -> execMove ,
 		whenEvent realSonar -> handleRobotRealSonar
   	finally repeatPlan   
	
  	Plan execMove resumeLastPlan[     
  		printCurrentEvent; 
    	onEvent usercmd :  usercmd( robotgui(unityAddr(X)) ) -> switchTo connectToUnity;//X=localhost at the moment    	
    	onEvent usercmd :  usercmd( robotgui(w(X)) ) -> switchTo moveForward;    
    	onEvent usercmd :  usercmd( robotgui(s(X)) ) -> switchTo moveBackward;  
  		onEvent usercmd :  usercmd( robotgui(a(X)) ) -> switchTo turnLeft;   
   		onEvent usercmd :  usercmd( robotgui(d(X)) ) -> switchTo turnRight ;   
   		onEvent usercmd :  usercmd( robotgui(h(X)) ) -> switchTo stopTheRobot ; 
    	onEvent usercmd :  usercmd( robotgui(x(X)) ) -> switchTo terminataAppl ;
   		onEvent usercmd :  usercmd( robotgui(f(X)) ) -> javaRun it.unibo.rover.mbotConnArduino.mbotLinefollow()     
   	]
    
  	Plan connectToUnity resumeLastPlan[ 
  		onEvent usercmd : usercmd(robotgui(unityAddr(ADDR))) -> println(unityAddrFromWebGUI(ADDR));//ADDR=localhost in this version
 		[ !? unityRemote(ADDR) ]  println( pleaseACTIVATEUNITYon( ADDR))  ;
 		[ !? unityOn ] println( "UNITY already connected"  )
	]      
	switchTo [ not !? unityOn ] doconnectToUnity
	 
 	Plan doconnectToUnity resumeLastPlan[ 
   		[ !? unityAddr("localhost")] println("ACTIVATING UNITY. Wait a moment ... ") ;
  		[ !? unityAddr("localhost")] javaRun it.unibo.utils.external.customExecute("./src/it/unibo/utils/unityStart.bat") ;
  		[ !? unityAddr("localhost")] delay 10000;	//wait until Unity activated
 		[ !? unityAddr(UNITYADDR)] connectUnity UNITYADDR ;  
		createUnityObject "rover" ofclass "Prefabs/CustomActor" ;
  		backwards 70 time ( 800 ) ;    	   
   	    right 70 time ( 1000 ) ;  //position
 		addRule unityOn 
	]   
 		
  	Plan moveForward resumeLastPlan[ 
//   		javaRun it.unibo.rover.mbotConnArduino.mbotForward()   
  	] 	
  	reactive  javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("forward", "40", "5000") 
//  	onward 40 time( 15000 )  
		whenEnd               -> endOfMove
		whenTout 30000        -> handleTout
		whenEvent sonarDetect -> handleRobotSonarDetect
		or whenEvent realSonar-> handleRobotRealSonar
		or whenEvent sonar    -> handleSonar
		or whenEvent usercmd  -> execMove
  	
  	Plan moveBackward resumeLastPlan[  
//  		javaRun it.unibo.rover.mbotConnArduino.mbotBackward()
  	]  
  	reactive javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("backward", "40", "5000")
//  	backwards 40 time ( 15000 )
		whenEnd               -> endOfMove
		whenTout 30000        -> handleTout
//		whenEvent sonarDetect -> handleObstacle  //no sensor on robot back
		whenEvent sonar       -> handleSonar
		or whenEvent usercmd  -> execMove
	Plan turnLeft resumeLastPlan [
		javaRun it.unibo.rover.mbotConnArduino.mbotLeft();
		[ !? unityOn ] left 40 time(750) else delay 900;
 		javaRun it.unibo.rover.mbotConnArduino.mbotStop()	
//		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("left", "40", "750");
//		delay 900;
//		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("stop", "40", "100")	
	]
	Plan turnRight resumeLastPlan [
		javaRun it.unibo.rover.mbotConnArduino.mbotRight();
		[ !? unityOn ] right 40 time(750) else  delay 900;
 		javaRun it.unibo.rover.mbotConnArduino.mbotStop()
//		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("right", "40", "750");
//		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("stop", "40", "100")	
	]
	Plan stopTheRobot resumeLastPlan[
		println("	**** STOP THE ROBOT");
		stop 40 time ( 10 );
		javaRun it.unibo.rover.mbotConnArduino.mbotStop()
	]
	  
	Plan terminataAppl resumeLastPlan [    
		stop 40 time ( 10 );
		javaRun it.unibo.rover.mbotConnArduino.mbotStop();
		actorOp terminateSystem
	]
	
	Plan handleRobotSonarDetect  resumeLastPlan [
		println("handleRobotSonarDetect");
  		javaRun it.unibo.rover.mbotConnArduino.mbotBackward();
   		backwards 40 time ( 200 ); 		
		javaRun it.unibo.rover.mbotConnArduino.mbotStop();
		stop 40 time ( 100 )     //stop for a while ...
	]
	Plan handleRobotRealSonar   resumeLastPlan [
		println("handleRobotRealSonar");
  		onEvent realSonar :  sonar( D ) -> addRule realDistance(D) //println( handleRobotRealSonar(D) );   		
	]
	switchTo [ !? foundObstacle ]  avoidRealObstacle
	
	Plan avoidRealObstacle resumeLastPlan [ 
//		javaRun it.unibo.rover.mbotConnArduino.mbotStop();
 		println("the avatar must execute the same move of the real robot");
 		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("backward", "40", "800");
 		javaRun it.unibo.utils.robotMixMoves.moveRobotAndAvatar("stop", "40", "100")
// 		backwards 40 time ( 200 ); 		
//		stop 40 time ( 100 )     //stop for a while ...
	]
	Plan handleSonar  resumeLastPlan [  
		//printCurrentEvent;
		javaRun it.unibo.rover.mbotConnArduino.mbotStop();
		onward 40 time ( 500 ) ; //out of sonar range 
		stop 40 time ( 100 )     //stop for a while ...  
	]
	Plan endOfMove resumeLastPlan [ println("endOfMove") ]
	
	Plan handleEndOfMove resumeLastPlan [ println("handleEndOfMove") ]
	Plan handleTout [ println("handleTout") ]	    
}  

QActor sonardetector context ctxMbotControl{
	Plan init normal [ ]
	switchTo waitForEvents
	
	Plan waitForEvents[ ]    
  	transition stopAfter 3600000   	//1h     
 		whenEvent sonar       ->  sendToRadar,
  		whenEvent sonarDetect ->  showObstcle,
 		whenEvent realSonar   ->  handleRealSonar
  	finally repeatPlan  
	  
	Plan sendToRadar resumeLastPlan [      
		printCurrentEvent; 		
		onEvent sonar  : sonar(sonar1, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,30) ;
		onEvent sonar  : sonar(sonar2, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,120) 
 	] 
 	
 	Plan handleRealSonar resumeLastPlan[
		printCurrentEvent; 		
		onEvent realSonar   : sonar( DISTANCE ) -> emit polar : p(DISTANCE, 0) 
 	]
	Plan showObstcle resumeLastPlan[
		println( "found obstacle" );		
		emit polar : p(30,90) 
	]
}