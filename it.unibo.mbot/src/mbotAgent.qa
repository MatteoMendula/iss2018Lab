/* 
 * ==============================================================
 * mbotAgent.qa
 * A robot that is able to move and to react to events
 * ==============================================================
 */      
System mbotAgent                
Event usercmd      : usercmd(CMD)          
Event sonar  	   : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect  : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar    : sonar( DISTANCE )				//From real sonar on real robot
Event    polar     : p( Distance, Angle )			//Just to perform an experiment
	  
Context ctxMbotAgent    ip [ host="192.168.43.229"   port=8039 ]     
Context ctxMbotExecutor ip [ host="192.168.43.67"    port=8029 ] -standalone   //(0) 
   
QActor roveragent context ctxMbotAgent {             
	Plan init normal [    
 		println("roveragent STARTS") 	
// 		emit usercmd : usercmd( robotgui(w(low)) ) 		
	]      
	switchTo lookAtSonars	   
	Plan lookAtSonars[
//	    emit polar : p( 70, 160 ); 	//(2) event propagation experiment 
		println("roveragent lookAtSonars ") 
 	]
	transition stopAfter 600000  //10 min       
 		whenEvent sonar        -> handleFixedSonar , 	  
 		whenEvent sonarDetect  -> handleSonar ,  	
  		whenEvent realSonar    -> handleSonar   	
   
    //The robot is moving either forward or backward: move it out of sonar range.
	Plan handleFixedSonar  [
			delay 500 ;    //avoid to raise sonar events again   
			emit usercmd : usercmd( robotgui(h(low)) ) 		 	   		
	]
	switchTo lookAtSonars     
		
	//Obstacle
 	Plan handleSonar  [       
  		printCurrentEvent ;  
		emit usercmd :  usercmd( robotgui(s(low)) ) ; //retrogress
		delay 500 ;    //avoid to raise sonar events again   
		emit usercmd : usercmd( robotgui(h(low)) ) 		 	   			
	]       
  	switchTo lookAtSonars	 	
}//roveragent

QActor evlogagent context ctxMbotAgent -g yellow {       
	Plan init normal [  println("evlogagent STARTS") ] 
	switchTo doWork
	
	Plan doWork[]  
	transition   stopAfter 60000 //1min         
    	whenEvent  polar        -> logEvent,
    	whenEvent  usercmd      -> logEvent,
  		whenEvent  sonar        -> logEvent,
   		whenEvent  realSonar    -> logEvent,
 		whenEvent  sonarDetect  -> logEvent
   	finally repeatPlan
  	
  	Plan  logEvent resumeLastPlan[
  		printCurrentEvent 
  	] 
}

QActor testsystem context ctxMbotAgent {  
	Plan init normal [  
		demo assign(n,9); 
		delay 2000;
  		emit polar : p( 60, 0 ) ;	
		println("testmbotagent STARTS") 
	]  
//	switchTo dotest	        
	
	Plan dotest[    
 		emit usercmd : usercmd( robotgui(w(low)) ) 	;
 		delay 1000; 	 
 		emit sonar : sonar( sonar1, 'rover', 40 ) ;
 		delay 2000; 
 		emit usercmd : usercmd( robotgui(w(low)) );
 		delay 2000;
 		emit sonar : sonar( sonar2, 'rover', 40 ) ;
 		delay 2000; 
  		emit usercmd : usercmd( robotgui(w(low)) );
 		delay 2000;
     	emit sonarDetect : sonarDetect( roversonar  ) 	 
  	] 
// 	switchTo raiseSeries  
 	 
 	Plan raiseSeries[
 		[ !? inc(n,2,V)] emit sonar : sonar( sonar2, 'rover', V ) ;	//> 500msec
		[ !? getVal(n,V)] println( emitted( sonar( sonar2, V ) ));		
		delay 50 		
 	]
 	finally repeatPlan 30
}