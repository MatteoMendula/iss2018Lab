/* Generated by AN DISI Unibo */ 
package it.unibo.rover;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRover extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRover(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/rover/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/rover/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForCmd",waitForCmd);
	    	stateTab.put("execMove",execMove);
	    	stateTab.put("connectToUnity",connectToUnity);
	    	stateTab.put("setAvatarInitialPosition",setAvatarInitialPosition);
	    	stateTab.put("turnLeft",turnLeft);
	    	stateTab.put("turnRight",turnRight);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "rover tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?onRaspberry" )) != null ){
	    	it.unibo.rover.mbotConnArduino.initRasp( myself  );
	    	}
	    	temporaryStr = "\"rover START\"";
	    	println( temporaryStr );  
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForCmd",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForCmd";  
	    	//bbb
	     msgTransition( pr,myselfName,"rover_"+myselfName,false,
	          new StateFun[]{stateTab.get("execMove") },//new StateFun[]
	          new String[]{"true","M","moveRover" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForCmd){  
	    	 println( getName() + " plan=waitForCmd WARNING:" + e_waitForCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForCmd
	    
	    StateFun execMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("execMove",-1);
	    	String myselfName = "execMove";  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(moveForward)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "forward" ;
	    		//end arg1
	    		String arg2 = "40" ;
	    		//end arg2
	    		String arg3 = "-1" ;
	    		//end arg3
	    		it.unibo.utils.robotMixMoves.moveRobotAndAvatar(this,arg1,arg2,arg3 );
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(moveBackward)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "backward" ;
	    		//end arg1
	    		String arg2 = "40" ;
	    		//end arg2
	    		String arg3 = "-1" ;
	    		//end arg3
	    		it.unibo.utils.robotMixMoves.moveRobotAndAvatar(this,arg1,arg2,arg3 );
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(turnLeft)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "turnLeft";
	    		parg =  updateVars( Term.createTerm("cmd(CMD)"), 
	    			                Term.createTerm("cmd(turnLeft)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(turnRight)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "turnRight";
	    		parg =  updateVars( Term.createTerm("cmd(CMD)"), 
	    			                Term.createTerm("cmd(turnRight)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(moveStop)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "stop" ;
	    		//end arg1
	    		String arg2 = "40" ;
	    		//end arg2
	    		String arg3 = "-1" ;
	    		//end arg3
	    		it.unibo.utils.robotMixMoves.moveRobotAndAvatar(this,arg1,arg2,arg3 );
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(connectToUnity)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "connectToUnity";
	    		parg =  updateVars( Term.createTerm("cmd(CMD)"), 
	    			                Term.createTerm("cmd(connectToUnity)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("cmd(followLine)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveRover") && 
	    		pengine.unify(curT, Term.createTerm("cmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		it.unibo.rover.mbotConnArduino.mbotLinefollow(this );
	    		}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_execMove){  
	    	 println( getName() + " plan=execMove WARNING:" + e_execMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//execMove
	    
	    StateFun connectToUnity = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("connectToUnity",-1);
	    	String myselfName = "connectToUnity";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?unityConfig(UNITYADDR,BATCH)" )) != null ){
	    	it.unibo.utils.external.connectRoverToUnity( myself ,guardVars.get("UNITYADDR"), guardVars.get("BATCH")  );
	    	}
	    	temporaryStr = "unityOn";
	    	addRule( temporaryStr );  
	    	//switchTo setAvatarInitialPosition
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "setAvatarInitialPosition",false, false, null); 
	    }catch(Exception e_connectToUnity){  
	    	 println( getName() + " plan=connectToUnity WARNING:" + e_connectToUnity.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//connectToUnity
	    
	    StateFun setAvatarInitialPosition = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("setAvatarInitialPosition",-1);
	    	String myselfName = "setAvatarInitialPosition";  
	    	execUnity("rover","backward",1000, 70,0); //rover: default namefor virtual robot		
	    	execUnity("rover","right",1000, 70,0); //rover: default namefor virtual robot		
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "roverState(STATE)","roverState(ready)", guardVars ).toString();
	    	emit( "local_rover", temporaryStr );
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_setAvatarInitialPosition){  
	    	 println( getName() + " plan=setAvatarInitialPosition WARNING:" + e_setAvatarInitialPosition.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//setAvatarInitialPosition
	    
	    StateFun turnLeft = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("turnLeft",-1);
	    	String myselfName = "turnLeft";  
	    	it.unibo.rover.mbotConnArduino.mbotLeft( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?unityOn" )) != null ){
	    	execUnity("rover","left",750, 40,0); //rover: default namefor virtual robot		
	    	}
	    	else{ //delay  ( no more reactive within a plan)
	    	aar = delayReactive(900,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "turnLeft";
	    	if( ! aar.getGoon() ) return ;
	    	}it.unibo.rover.mbotConnArduino.mbotStop( myself  );
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_turnLeft){  
	    	 println( getName() + " plan=turnLeft WARNING:" + e_turnLeft.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//turnLeft
	    
	    StateFun turnRight = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("turnRight",-1);
	    	String myselfName = "turnRight";  
	    	it.unibo.rover.mbotConnArduino.mbotRight( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?unityOn" )) != null ){
	    	execUnity("rover","right",750, 40,0); //rover: default namefor virtual robot		
	    	}
	    	else{ //delay  ( no more reactive within a plan)
	    	aar = delayReactive(900,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "turnRight";
	    	if( ! aar.getGoon() ) return ;
	    	}it.unibo.rover.mbotConnArduino.mbotStop( myself  );
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_turnRight){  
	    	 println( getName() + " plan=turnRight WARNING:" + e_turnRight.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//turnRight
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
