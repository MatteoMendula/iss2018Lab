/* Generated by AN DISI Unibo */ 
package it.unibo.applr0agent;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractApplr0agent extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "tcp://localhost:1883";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractApplr0agent(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/applr0agent/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/applr0agent/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("doWork",doWork);
	    	stateTab.put("alarmHandlePolicy",alarmHandlePolicy);
	    	stateTab.put("handleSonarEvents",handleSonarEvents);
	    	stateTab.put("waitAnswer",waitAnswer);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "applr0agent tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"applr0agent STARTS\"";
	    	println( temporaryStr );  
	     connectToMqttServer("tcp://localhost:1883");
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "applr0agent_"+myselfName, 
	              "doWork",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun doWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doWork",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doWork";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(w(low)))", guardVars ).toString();
	    	emit( "usercmd", temporaryStr );
	    	//bbb
	     msgTransition( pr,myselfName,"applr0agent_"+myselfName,false,
	          new StateFun[]{stateTab.get("alarmHandlePolicy"), stateTab.get("handleSonarEvents") },//new StateFun[]
	          new String[]{"true","M","alarmmsg", "true","E","sonarSensor" },
	          6000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doWork){  
	    	 println( getName() + " plan=doWork WARNING:" + e_doWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWork
	    
	    StateFun alarmHandlePolicy = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("alarmHandlePolicy",-1);
	    	String myselfName = "alarmHandlePolicy";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"applr0agent ALARM HANDLING POLICY (stop)... \"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    	emit( "usercmd", temporaryStr );
	    	temporaryStr = "\"applr0agent ALARM HANDLING POLICY DONE \"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"applr0agent_"+myselfName,false,true);
	    }catch(Exception e_alarmHandlePolicy){  
	    	 println( getName() + " plan=alarmHandlePolicy WARNING:" + e_alarmHandlePolicy.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//alarmHandlePolicy
	    
	    StateFun handleSonarEvents = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSonarEvents",-1);
	    	String myselfName = "handleSonarEvents";  
	    	printCurrentEvent(false);
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(realsonar,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(d(low)))", guardVars ).toString();
	    			emit( "usercmd", temporaryStr );
	    			//delay  ( no more reactive within a plan)
	    			aar = delayReactive(750,"" , "");
	    			if( aar.getInterrupted() ) curPlanInExec   = "handleSonarEvents";
	    			if( ! aar.getGoon() ) return ;
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    			emit( "usercmd", temporaryStr );
	    			if( (guardVars = QActorUtils.evalTheGuard(this, " !?task(tasktodo(obstacleAvoidance,on))" )) != null ){
	    			{//actionseq
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "tasktodo(TASK,ARGS)","tasktodo(obstacleAvoidance,\"do\")", guardVars ).toString();
	    			emit( "tasktodo", temporaryStr );
	    			temporaryStr = "waitAnswer";
	    			addRule( temporaryStr );  
	    			};//actionseq
	    			}
	    			else{ pr.terminate(); 
	    			}};//actionseq
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(roversonar,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(d(low)))", guardVars ).toString();
	    			emit( "usercmd", temporaryStr );
	    			//delay  ( no more reactive within a plan)
	    			aar = delayReactive(750,"" , "");
	    			if( aar.getInterrupted() ) curPlanInExec   = "handleSonarEvents";
	    			if( ! aar.getGoon() ) return ;
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    			emit( "usercmd", temporaryStr );
	    			if( (guardVars = QActorUtils.evalTheGuard(this, " !?task(tasktodo(obstacleAvoidance,on))" )) != null ){
	    			{//actionseq
	    			temporaryStr = "\"emitting  tasktodo \"";
	    			println( temporaryStr );  
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "tasktodo(TASK,ARGS)","tasktodo(obstacleAvoidance,\"do\")", guardVars ).toString();
	    			emit( "tasktodo", temporaryStr );
	    			temporaryStr = "waitAnswer";
	    			addRule( temporaryStr );  
	    			};//actionseq
	    			}
	    			else{ pr.terminate(); 
	    			}};//actionseq
	    	}
	    	//switchTo waitAnswer
	        switchToPlanAsNextState(pr, myselfName, "applr0agent_"+myselfName, 
	              "waitAnswer",false, true, " ??waitAnswer"); 
	    }catch(Exception e_handleSonarEvents){  
	    	 println( getName() + " plan=handleSonarEvents WARNING:" + e_handleSonarEvents.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSonarEvents
	    
	    StateFun waitAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitAnswer",-1);
	    	String myselfName = "waitAnswer";  
	    	temporaryStr = "\"applr0agent WAITS that a passage is found\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"applr0agent_"+myselfName,false,
	          new StateFun[]{
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	                switchToPlanAsNextState(pr, myselfName, "applr0agent_"+myselfName, 
	                      "doWork",false, false, null); 
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=waitAnswer WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          }
	          },//new StateFun[]
	          new String[]{"true","E","taskdone" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitAnswer){  
	    	 println( getName() + " plan=waitAnswer WARNING:" + e_waitAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitAnswer
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
