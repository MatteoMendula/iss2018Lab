/* Generated by AN DISI Unibo */ 
package it.unibo.applr1agent;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractApplr1agent extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractApplr1agent(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/applr1agent/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/applr1agent/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitFortask",waitFortask);
	    	stateTab.put("checkForPassage",checkForPassage);
	    	stateTab.put("yetObstacle",yetObstacle);
	    	stateTab.put("passageFound",passageFound);
	    	stateTab.put("alarmHandlePolicy",alarmHandlePolicy);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "applr1agent tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	     connectToMqttServer("tcp://localhost:1883");
	    	//switchTo waitFortask
	        switchToPlanAsNextState(pr, myselfName, "applr1agent_"+myselfName, 
	              "waitFortask",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitFortask = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitFortask",-1);
	    	String myselfName = "waitFortask";  
	    	temporaryStr = "\"applr1agent EMITS taskexec \"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "taskexec(tasktodo(NAME,ARGS))","taskexec(tasktodo(obstacleAvoidance,on))", guardVars ).toString();
	    	emit( "taskexec", temporaryStr );
	    	temporaryStr = "\"applr1agent WAITS\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"applr1agent_"+myselfName,false,
	          new StateFun[]{stateTab.get("checkForPassage") }, 
	          new String[]{"true","M","taskmsg" },
	          360000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitFortask){  
	    	 println( getName() + " plan=waitFortask WARNING:" + e_waitFortask.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitFortask
	    
	    StateFun checkForPassage = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkForPassage",-1);
	    	String myselfName = "checkForPassage";  
	    	temporaryStr = "\"checkForPassage ATTEMPT\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(w(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "checkForPassage";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(a(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//bbb
	     msgTransition( pr,myselfName,"applr1agent_"+myselfName,false,
	          new StateFun[]{stateTab.get("yetObstacle") }, 
	          new String[]{"true","E","sonarSensor" },
	          1000, "passageFound" );//msgTransition
	    }catch(Exception e_checkForPassage){  
	    	 println( getName() + " plan=checkForPassage WARNING:" + e_checkForPassage.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkForPassage
	    
	    StateFun yetObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("yetObstacle",-1);
	    	String myselfName = "yetObstacle";  
	    	temporaryStr = "yetObstacle";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(s(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(200,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "yetObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(d(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(750,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "yetObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	//switchTo checkForPassage
	        switchToPlanAsNextState(pr, myselfName, "applr1agent_"+myselfName, 
	              "checkForPassage",false, false, null); 
	    }catch(Exception e_yetObstacle){  
	    	 println( getName() + " plan=yetObstacle WARNING:" + e_yetObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//yetObstacle
	    
	    StateFun passageFound = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("passageFound",-1);
	    	String myselfName = "passageFound";  
	    	temporaryStr = "\"passageFound. EMIT taskdone\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "taskdone(TASK,ARGS)","taskdone(\"obstacleAvoidance\",\"ok\")", guardVars ).toString();
	    	emit( "taskdone", temporaryStr );
	    	//switchTo waitFortask
	        switchToPlanAsNextState(pr, myselfName, "applr1agent_"+myselfName, 
	              "waitFortask",false, false, null); 
	    }catch(Exception e_passageFound){  
	    	 println( getName() + " plan=passageFound WARNING:" + e_passageFound.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//passageFound
	    
	    StateFun alarmHandlePolicy = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("alarmHandlePolicy",-1);
	    	String myselfName = "alarmHandlePolicy";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"applr1agent ALARM HANDLING POLICY (stop)... \"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	temporaryStr = "\"applr1agent ALARM HANDLING POLICY DONE \"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"applr1agent_"+myselfName,false,true);
	    }catch(Exception e_alarmHandlePolicy){  
	    	 println( getName() + " plan=alarmHandlePolicy WARNING:" + e_alarmHandlePolicy.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//alarmHandlePolicy
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
