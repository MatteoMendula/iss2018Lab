/* 
 * =======================================================================================
 * qacoap.qa
 * =======================================================================================
 */    
System qacoap                

Dispatch info  : info(X)
Event coapInfo : info(X)
Event coapServerStarted : info(X)

Context ctxQaCoap ip [ host="localhost"   port=8032 ]  
Context ctxQaCoapServer ip [ host="localhost"   port=8042 ] -standalone 

//QActor qacoapserver context ctxQaCoap -g white  {      
//	Plan init normal [  
//		println("qacoapserver STARTS ")  ;
////		javaRun it.unibo.coap.platform.coapUtils.createServer();
//		javaOp "createServer()" ; 
//		emit coapServerStarted : info(1) ;
//		println("qacoapserver ENDS ") ;	   
//		delay 600000		  
//	]
//}
 
QActor qacoapobserver context ctxQaCoap  -g yellow {  
	Plan init normal [ 	
	]
//	transition stopAfter 600000
//	whenEvent coapServerStarted -> work
	switchTo work
	Plan work  [  
		println("qacoapoberver STARTS ") ;	
//		javaRun it.unibo.coap.platform.coapUtils.doquery("globalkb", "assign(a,100)") ;	
//		javaRun it.unibo.coap.platform.coapUtils.doquery("globalkb", "getVal(a,X)") ; 		
//		javaRun it.unibo.coap.platform.coapUtils.createObserver()

		javaOp "createObserver()";
		javaOp "doCoapQuery( \"globalkb\" ,  \"assign(a,100)\" )";
		javaOp "doCoapQuery( \"globalkb\" ,  \"getVal(a,X)\" )"
 	]
 	switchTo observe
 	Plan observe[
		println("qacoapoberver OBSERVING ... ") 
 	]
 	transition stopAfter 600000
 	whenEvent  coapInfo : info(X) do println( qacoapobserver(observeddddddddddddddd,X) )
 	finally repeatPlan
}

QActor qacoapanotherobserver context ctxQaCoap  -g cyan {  
	Plan init normal [ 	
	]
//	transition stopAfter 600000
//	whenEvent coapServerStarted -> work
	switchTo work

	Plan work [  
		println("qacoapanotherobserver STARTS ") ;	
//		javaRun it.unibo.coap.platform.coapUtils.doquery("globalkb", "assign(a,200)") ;	
//		javaRun it.unibo.coap.platform.coapUtils.doquery("globalkb", "getVal(a,X)") ; 		
//		javaRun it.unibo.coap.platform.coapUtils.createObserver() 

		delay 700 ;		
		javaOp "createObserver()";
		javaOp "doCoapQuery( \"globalkb\" ,  \"assign(a,200)\" )"; 
		javaOp "doCoapQuery( \"globalkb\" ,  \"getVal(a,X)\" )"
	]
 	switchTo observe
 	Plan observe[  //potential concurrent access to qacoapsender kb
		println("qacoapoberver OBSERVING ... ") 
 	]
 	transition stopAfter 600000
 	whenEvent  coapInfo : info(X) do println( qacoapobserver(observeddddddddddddddd,X) )
 	finally repeatPlan
}


QActor qacoapsender context ctxQaCoap  {  
	Plan init normal [ 	
	]
//	transition stopAfter 600000
//	whenEvent coapServerStarted -> work
	switchTo work
	  
	Plan work [ 
 		println("qacoapsender sends a qa msg ") ;  		
//  		javaRun it.unibo.coap.platform.coapUtils.sendPost(
//			"msg( info, dispatch, qacoapsender, qareceiver, info(1), 1 )");
		javaOp "sendPost( \"msg( info, dispatch, qacoapsender, qareceiver, info(1), 1 )\" )";
  		delay 2000;
  		println("qacoapsender sends a user msg ") ;  		
//		javaRun it.unibo.coap.platform.coapUtils.sendPost("helloMsg");
		javaOp "sendPost( \"helloMsg\" )";
		delay 2000;
		println("qacoapsender sends another qa msg ") ;  		
//		javaRun it.unibo.coap.platform.coapUtils.sendPost(
//			"msg( info, dispatch, qacoapsender, qareceiver, info(2), 2 )");
		javaOp "sendPost( \"msg( info, dispatch, qacoapsender, qareceiver, info(2), 2 )\" )";
		println("qacoapsender ENDS ")  
	]
}
 
QActor qareceiver context ctxQaCoap -g green  {  
	Plan init normal [  
		println("qareceiver STARTS ") 
 	]
 	transition stopAfter 600000
 	whenMsg  info : info(X) do println( qareceiver(received,X) )
 	finally repeatPlan
}

/*
QActor globalkb context ctxQaCoap  {
	Plan init normal [ 	
		demo assign( a,0 )
	]
//	transition stopAfter 600000
//	whenEvent coapServerStarted -> work
	switchTo work
	
	Plan work  [  
		println("globalkb CREATE RESOURCE ") ; 
		javaOp 	"addResource()"	
// 		javaRun it.unibo.coap.platform.coapUtils.addResource()
 	]
 	switchTo updateKb
 	
 	Plan updateKb[
 		[ !? getVal(a,X) ] println( inc(a,X) ) ;   
 		demo inc( a,1, _ );
 		delay 300
 	]
 	finally repeatPlan 10
}
*/
