/* 
 * =======================================================================================
 * webGuiExecutor.qa
 * =======================================================================================
 */    
System webGuiExecutor                
Event usercmd      : usercmd(CMD)  					//from web gui
Event sonar  	   : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect  : sonarDetect(X)					//From (virtual robot) sonar

Dispatch moveRobot : usercmd(CMD)       
Dispatch startAppl : startAppl(CMD) 

//pubSubServer  "tcp://localhost:1883"    	 	 
pubSubServer  "ws://localhost:1884"    		//use websocket 	 
    
Context ctxWebGuiExecutor ip [ host="localhost"   port=8032 ]  -httpserver     
EventHandler evh for usercmd   {	//event-driven ; no Mqtt support yet
 	forwardEvent player -m moveRobot  	//from event to message
};     
/*  
 * -----------------------------------------------------
 * The player is a an interpreter of moveRobot dispatch
 * -----------------------------------------------------
 */  
QActor player context ctxWebGuiExecutor -pubsub  {       //The name MUST be player   
	Plan init normal [  
		javaRun it.unibo.utils.clientTcp.initClientConn("localhost","8999");
		delay 1000;
		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': 800 }");
		delay 1000;
		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveBackward', 'arg': 800 }");
		println("player START")
	]  
    switchTo waitForCmd            
		 
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg moveRobot   -> execMove  	  
 	finally repeatPlan 
 	  
  	Plan execMove resumeLastPlan[    
  		printCurrentMessage;    
    	onMsg moveRobot : usercmd( robotgui(h(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'alarm' }");
    	onMsg moveRobot : usercmd( robotgui(w(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': -1 }");
     	onMsg moveRobot : usercmd( robotgui(s(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveBackward', 'arg': -1 }");
   		onMsg moveRobot : usercmd( robotgui(a(X)) )    -> 
  			javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnLeft', 'arg': 800 }");
    		onMsg moveRobot : usercmd( robotgui(d(X)) )    -> 
   			javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnRight', 'arg': 800 }");
   		onMsg moveRobot : usercmd( robotgui(x(X)) )  ->   forward robotpfrs -m startAppl : startAppl(go)
   	]        
}  

QActor robotpfrs  context ctxWebGuiExecutor -pubsub  {
	Plan init normal [ 
		delay 3000;
		forward player -m moveRobot : usercmd( robotgui(a(low)) ) ;
		delay 1000;
		forward player -m moveRobot : usercmd( robotgui(h(low)) ) ;
		println("player starts")
	]
	transition stopAfter 600000
		whenMsg startAppl -> applicationLogic
   	
   	Plan applicationLogic [
   		println("player starts the applicationLogic")
   	]
   	switchTo goAhead
   	
    Plan goAhead [
    	javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': -1 }")
    ]
	transition stopAfter 600000
		whenMsg moveRobot : usercmd( robotgui(h(X)) ) do endPlan "robotpfrs ENDS",
		whenEvent sonarDetect -> obstacle
//		whenEvent sonar  	  -> sonarHandle 
		
	Plan obstacle [ 
		printCurrentEvent;
		onEvent sonarDetect : sonarDetect( wallUp ) -> {
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnRight', 'arg': 800 }");
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': 200 }");
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnRight', 'arg': 800 }")
 		};
		onEvent sonarDetect : sonarDetect( wallLeft ) -> {
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnRight', 'arg': 800 }")
 		};
		onEvent sonarDetect : sonarDetect( wallDown ) -> {
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnLeft', 'arg': 800 }");
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': 200 }");
				javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnLeft', 'arg': 800 }")
 		}
	]
	switchTo goAhead
	
//	Plan sonarHandle  [
//		onEvent sonar  : sonar(sonar1, TARGET, DISTANCE) -> println( sonar(sonar1, TARGET, DISTANCE) );
//		onEvent sonar  : sonar(sonar2, TARGET, DISTANCE) -> println( sonar(sonar2, TARGET, DISTANCE) )
//	]
//	switchTo goAhead
}
/*
 * -----------------------------------------------------
 * Shows sonar events emitted by the GUI (it.unibo.utils.clientTcp)
 * -----------------------------------------------------
 */
QActor sonarguidetector context ctxWebGuiExecutor   {  
Rules{   
	checkEnd( D ) :-
		eval( lt(D,5) ),
		output( checkEndddddddddddddddddddddddddddddddddddddddddddddddd( D ) ),
		assert( endreached ).
 }
	Plan init normal [	println("sonarguidetector STARTS ") ]
	switchTo waitForEvents        
	  
	Plan waitForEvents[ 
		[ ?? endreached ] forward robotpfrs -m moveRobot : usercmd( robotgui(h(low)) )       
		]
  	transition stopAfter 3600000   	//1h         
    	whenEvent sonar  : sonar(sonar2,   TARGET, DISTANCE )  do demo checkEnd(DISTANCE), // println( sonar(NAME,   TARGET, DISTANCE ) ),
  		whenEvent sonarDetect : sonarDetect( TARGET ) do  println( sonarguidetector( TARGET ) ) 
  	finally repeatPlan  
} 