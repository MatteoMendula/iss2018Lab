/* 
 * =======================================================================================
 * webGuiExecutor.qa
 * =======================================================================================
 */    
System webGuiExecutor                
Event usercmd      : usercmd(CMD)  					//from web gui
Event sonar  	   : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect  : sonarDetect(X)					//From (virtual robot) sonar

Dispatch moveRover : usercmd(CMD)       
    
Context ctxWebGuiExecutor ip [ host="localhost"   port=8032 ]   -httpserver  
EventHandler evh for usercmd -print {	//event-driven ; no Mqtt support yet
 	forwardEvent player -m moveRover  	//from event to message
};     
/*  
 * -----------------------------------------------------
 * The player is a an interpreter of moveRover dispatch
 * -----------------------------------------------------
 */  
QActor player context ctxWebGuiExecutor   {         
	Plan init normal [  
		javaRun it.unibo.utils.clientTcp.initClientConn("localhost","8999");
		delay 1000;
		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': 800 }");
		delay 1000;
		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveBackward', 'arg': 800 }");
		println("player START")
	]  
    switchTo waitForCmd            
		 
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg moveRover   -> execMove  	  
 	finally repeatPlan 
 	  
  	Plan execMove resumeLastPlan[    
  		printCurrentMessage;    
    	onMsg moveRover : usercmd( robotgui(h(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'alarm' }");
    	onMsg moveRover : usercmd( robotgui(w(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveForward', 'arg': -1 }");
     	onMsg moveRover : usercmd( robotgui(s(X)) )    -> 
    		javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'moveBackward', 'arg': -1 }");
   		onMsg moveRover : usercmd( robotgui(a(X)) )    -> 
  			javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnLeft', 'arg': 800 }");
    		onMsg moveRover : usercmd( robotgui(d(X)) )    -> 
   			javaRun it.unibo.utils.clientTcp.sendMsg("{ 'type': 'turnRight', 'arg': 800 }");
   		onMsg moveRover : usercmd( robotgui(x(X)) )    -> { actorOp terminateSystem() } //r
   	]        
}  
/*
 * -----------------------------------------------------
 * Shows sonar events emitted by the GUI (it.unibo.utils.clientTcp)
 * -----------------------------------------------------
 */
QActor sonarguidetector context ctxWebGuiExecutor   {  
	Plan init normal [	println("sonarguidetector STARTS ") ]
	switchTo waitForEvents       
	  
	Plan waitForEvents[ ]        
  	transition stopAfter 3600000   	//1h         
//  		whenEvent sonar  : sonar(NAME,   TARGET, DISTANCE )  do  println( sonar(NAME,   TARGET, DISTANCE ) ),
  		whenEvent sonarDetect : sonarDetect( TARGET ) do  println( sonarDetect( TARGET ) ) 
  	finally repeatPlan  
} 