/*
 * -----------------------------------------------
 * it.unibo.mbot2018/nodeCode/robotFrontend/appFrontEndRobot.js
 * -----------------------------------------------
 */
var createError  = require('http-errors');
var express      = require('express');
var path         = require('path');
var cookieParser = require('cookie-parser');
var logger       = require('morgan');
const cors       = require("cors");
const modelutils = require('./appServer/utils/modelUtils');
const routesGen  = require('./appServer/routes/routesGenerator');
const app        = express();
 
 
//IMPORTANT POINT %%%%%%%%%%%%%%%%%%%%%
const modelInterface    = require('./appServer/models/robot');
const robotModel        = modelInterface.getResourceModel();
const robotControl      = require('./appServer/controllers/robotControl');

const routeInfo         = require('./appServer/routes/robotInfoRoute');
const robotApplRoute    = require('./appServer/routes/robotApplControlRoute');
//Other routes are generated by the routesGen.create (see later)
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
/*
 * Cross-origin resource sharing (CORS) is a mechanism that allows 
 * restricted resources on a web page to be requested from another 
 * domain outside the domain from which the first resource was served
 */
app.use( cors() );

/*
* --------------------------------------------------------------
* SET UP THE RENDERING ENGINE
* --------------------------------------------------------------
*/
app.set('views', path.join(__dirname, './appServer', 'views'));	 
app.set("view engine", "ejs");	//npm install --save ejs

/*
* --------------------------------------------------------------
* Static files with middleware
* --------------------------------------------------------------
*/
app.use(express.static(path.join(__dirname, './appServer/public')));

/*
* --------------------------------------------------------------
* Routes
* --------------------------------------------------------------
*/
//Application command route
app.use('/applCommand', robotApplRoute);

//Create Other Routes
app.use('/', routesGen.create(robotModel) );

/*
* --------------------------------------------------------------
* 3a) HANDLE GET REQUESTS
* --------------------------------------------------------------
*/
app.get('/envdevices', function (req, res) {
  	req.myresult  = JSON.stringify( 
	 modelInterface.envmodelToResources(robotModel.links.robotenv.envdevices.resources )
	);
 	if (req.accepts('html')){ res.render('showdevs', 
 		{'title': 'Environment Devices', 'res': req.myresult, "where":"in the environment",
 		'model':robotModel.links.robotenv.envdevices, 'host': req.headers.host  } 
 	)} else if (req.accepts('application/json')) { res.send(req.myresult);} 
 	 else res.send("please specify better"); 
});

app.get('/robotdevices', function (req, res) {
  	req.myresult  = JSON.stringify( 
	 modelInterface.envmodelToResources(robotModel.links.robot.resources.robotdevices.resources)
	);
 	if (req.accepts('html')){ res.render('showdevs', 
 		{'title': 'Robot Devices', 'res': req.myresult, "where":"on the robot",
 		'model': robotModel.links.robot.resources.robotdevices, 'host': req.headers.host  } 
 	)} else if (req.accepts('application/json')) { res.send(req.myresult);}
 	 else res.send("please specify better"); 
});

//to promote M2M interaction
app.get( modelInterface.actionsLinkUrlStr, function( req, res ) { 	   
  	res.send( modelInterface.robotMoves );
});
 
/*
* --------------------------------------------------------------
* 3b) HANDLE A POST REQUEST
* --------------------------------------------------------------
*/
app.post("/commands/w", function(req, res, next) { 
	robotControl.actuate("w", req, res ); next();});
app.post("/commands/s", function(req, res, next) { 
	robotControl.actuate("s", req, res ); next();});
app.post("/commands/h", function(req, res, next) { 
	robotControl.actuate("h", req, res ); next(); });
app.post("/commands/d", function(req, res, next) { 
	robotControl.actuate("d", req, res ); next(); });
app.post("/commands/a", function(req, res, next) { 
	robotControl.actuate("a", req, res ); next(); });
		
/*
 * LAST ACTION
 */ 
app.use( function(req,res,next){ 
    console.log("last use - req.myresult=" + req.myresult );
    renderResponse( req, robotModel.links.robot.resources.robotstate.state, res );
} );

var renderResponse = function(req, robotstate, res){
	if (req.accepts('html') && 
		checkContentType(req, 'application/x-www-form-urlencoded') ) { //from a web page button
		 // Check if there's a custom renderer for this media type and resource;
        if (req.type) res.render(req.type, {'title': 'Resource Model', 'req': req});
        else{  
        	console.info('\t appFrontEndRobot renderResponse state=' + robotstate );
        	res.render('access',  
				{'title': 'Robot Control Page', 'res': "", 'model': robotModel.links.robot,
				'robotstate': robotstate, 'refToEnv': req.headers.host+"/envdevices"}); 	
        }
	}else if ( req.accepts('application/json') && checkContentType(req, 'application/json') ) {
		//console.log('\t renderResponse: JSON representation!  '  );
	    res.send(req.myresult);		
	}else if (req.accepts('application/x-msgpack') && checkContentType(req,'application/x-msgpack')){
		 res.send("Sorry, application/x-msgpack todo ... ");	
	}else{
		 console.info("Defaulting to Html representation! " );
 	}
}

checkContentType = function ( req, ctype ){
	var contype = req.headers['content-type'];
	//console.info('\t appFrontEndRobot checkContentType req.type=' + req.type + " content=" + contype);
	if (contype == undefined ) return true ;	//html is first
	return ( contype.indexOf(ctype) >= 0)
}

//---------------------------------------------------------------------

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  var state  = robotModel.links.robot.resources.robotstate.state;
	res.render('error', 
		{'title': 'Error', 'res': err, 'host': req.headers.host  } 
	); 
});


//IMPORTANT POINT %%%%%%%%%%%%%%%%%%%%%
module.exports = app;
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%