/* Generated by AN DISI Unibo */ 
package it.unibo.testeruser2;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractTesteruser2 extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractTesteruser2(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/testeruser2/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/testeruser2/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("doRequest",doRequest);
	    	stateTab.put("handleAnswer",handleAnswer);
	    	stateTab.put("userLogic",userLogic);
	    	stateTab.put("usage",usage);
	    	stateTab.put("simulateRelease",simulateRelease);
	    	stateTab.put("waitForNotification",waitForNotification);
	    	stateTab.put("lookAtNotification",lookAtNotification);
	    	stateTab.put("endOfJob",endOfJob);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "testeruser2 tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "getName"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??actorOpDone(OP,R)" )) != null ){
	    	temporaryStr = "myname(R)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bookingRequest(NOTIFYME)","bookingRequest(true)", guardVars ).toString();
	    	sendExtMsg("bookingRequest","mbotmanager", "ctxMbotManager", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo doRequest
	        switchToPlanAsNextState(pr, myselfName, "testeruser2_"+myselfName, 
	              "doRequest",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun doRequest = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doRequest",-1);
	    	String myselfName = "doRequest";  
	    	temporaryStr = "\"testerUser2 emits request\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bookingRequest(NOTIFYME)","bookingRequest(true)", guardVars ).toString();
	    	sendExtMsg("bookingRequest","mbotmanager", "ctxMbotManager", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"testeruser2_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAnswer") }, 
	          new String[]{"true","M","bookingRequestAnswer" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doRequest){  
	    	 println( getName() + " plan=doRequest WARNING:" + e_doRequest.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doRequest
	    
	    StateFun handleAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleAnswer",-1);
	    	String myselfName = "handleAnswer";  
	    	temporaryStr = "\"testerUser2 handleAnswer\"";
	    	println( temporaryStr );  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bookingRequestAnswer(failure)");
	    	if( currentMessage != null && currentMessage.msgId().equals("bookingRequestAnswer") && 
	    		pengine.unify(curT, Term.createTerm("bookingRequestAnswer(TOKEN)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="failure(notoken)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("bookingRequestAnswer(TOKEN)"),  Term.createTerm("bookingRequestAnswer(failure)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("failure",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bookingRequestAnswer(token(TK))");
	    	if( currentMessage != null && currentMessage.msgId().equals("bookingRequestAnswer") && 
	    		pengine.unify(curT, Term.createTerm("bookingRequestAnswer(TOKEN)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="usage(token(TK))";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("bookingRequestAnswer(TOKEN)"),  Term.createTerm("bookingRequestAnswer(token(TK))"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("usage",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//switchTo userLogic
	        switchToPlanAsNextState(pr, myselfName, "testeruser2_"+myselfName, 
	              "userLogic",false, false, null); 
	    }catch(Exception e_handleAnswer){  
	    	 println( getName() + " plan=handleAnswer WARNING:" + e_handleAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleAnswer
	    
	    StateFun userLogic = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("userLogic",-1);
	    	String myselfName = "userLogic";  
	    	temporaryStr = "\"testerUser2 userLogic\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"testeruser2_"+myselfName,false,
	          new StateFun[]{stateTab.get("usage"), stateTab.get("waitForNotification"), stateTab.get("doRequest") }, 
	          new String[]{"true","M","usage", "true","M","failure", "true","M","tryagain" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_userLogic){  
	    	 println( getName() + " plan=userLogic WARNING:" + e_userLogic.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//userLogic
	    
	    StateFun usage = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("usage",-1);
	    	String myselfName = "usage";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("usage(token(TK))");
	    	if( currentMessage != null && currentMessage.msgId().equals("usage") && 
	    		pengine.unify(curT, Term.createTerm("usage(TOKEN)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="token(TK)";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("usage(TOKEN)"),  Term.createTerm("usage(token(TK))"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?token(TOKEN)" )) != null ){
	    	temporaryStr = "testerUser2UUUUUUUUUUUUUUUUUsage(TOKEN)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?token(TOKEN)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"getRobotDriveInterface(ACCESSTOKEN)","getRobotDriveInterface(TOKEN)", guardVars ).toString();
	    	sendExtMsg("getRobotDriveInterface","mbotmanager", "ctxMbotManager", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(2000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "usage";
	    	if( ! aar.getGoon() ) return ;
	    	//switchTo simulateRelease
	        switchToPlanAsNextState(pr, myselfName, "testeruser2_"+myselfName, 
	              "simulateRelease",false, false, null); 
	    }catch(Exception e_usage){  
	    	 println( getName() + " plan=usage WARNING:" + e_usage.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//usage
	    
	    StateFun simulateRelease = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("simulateRelease",-1);
	    	String myselfName = "simulateRelease";  
	    	temporaryStr = "\"testerUser2 simulateRelease and look if there is the answer to the second request\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??token(TOKEN)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bookingRelease(ACCESSTOKEN)","bookingRelease(TOKEN)", guardVars ).toString();
	    	sendExtMsg("bookingRelease","mbotmanager", "ctxMbotManager", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"testeruser2_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAnswer") }, 
	          new String[]{"true","M","bookingRequestAnswer" },
	          10000, "endOfJob" );//msgTransition
	    }catch(Exception e_simulateRelease){  
	    	 println( getName() + " plan=simulateRelease WARNING:" + e_simulateRelease.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//simulateRelease
	    
	    StateFun waitForNotification = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitForNotification",-1);
	    	String myselfName = "waitForNotification";  
	    	temporaryStr = "\"testerUser2 waitForNotification\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"testeruser2_"+myselfName,false,
	          new StateFun[]{stateTab.get("lookAtNotification") }, 
	          new String[]{"true","E","notify" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForNotification){  
	    	 println( getName() + " plan=waitForNotification WARNING:" + e_waitForNotification.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForNotification
	    
	    StateFun lookAtNotification = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("lookAtNotification",-1);
	    	String myselfName = "lookAtNotification";  
	    	temporaryStr = "\"testerUser1 lookAtNotification\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("notify(available)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("notify") && 
	    		pengine.unify(curT, Term.createTerm("notify(ARG)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="tryagain(true)";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("notify(ARG)"),  Term.createTerm("notify(available)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("tryagain",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("notify(removed)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("notify") && 
	    		pengine.unify(curT, Term.createTerm("notify(ARG)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="endOfJob";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("notify(ARG)"),  Term.createTerm("notify(removed)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//switchTo userLogic
	        switchToPlanAsNextState(pr, myselfName, "testeruser2_"+myselfName, 
	              "userLogic",false, false, " not !?endOfJob" 
	              ); 
	    }catch(Exception e_lookAtNotification){  
	    	 println( getName() + " plan=lookAtNotification WARNING:" + e_lookAtNotification.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//lookAtNotification
	    
	    StateFun endOfJob = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("endOfJob",-1);
	    	String myselfName = "endOfJob";  
	    	temporaryStr = "\"testerUser2 ENDS\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(600000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "endOfJob";
	    	if( ! aar.getGoon() ) return ;
	    	repeatPlanNoTransition(pr,myselfName,"testeruser2_"+myselfName,false,false);
	    }catch(Exception e_endOfJob){  
	    	 println( getName() + " plan=endOfJob WARNING:" + e_endOfJob.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//endOfJob
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
