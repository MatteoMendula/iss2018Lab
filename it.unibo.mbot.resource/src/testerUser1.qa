/*
 * ==============================================================
 * it\unibo\mbot\resource\testerUser1.qa
 * ==============================================================
 */ 
 System testerUser1
       
 Dispatch bookingRequest          : bookingRequest( NOTIFYME )		//NOTIFYME = true | false
 Dispatch bookingRequestAnswer    : bookingRequestAnswer( TOKEN )
 Dispatch bookingRelease          : bookingRelease( ACCESSTOKEN )
 Dispatch getRobotDriveInterface  : getRobotDriveInterface( ACCESSTOKEN )
 
 Event notify                 : notify( ARG )
  
 Dispatch usage       : usage( TOKEN )  
 Dispatch tryagain    : tryagain( ARG )
 Dispatch failure     : failure( ARG )
 
 Context ctxTesterUser1   ip [ host="localhost"   port=8078 ]     
 Context ctxMbotManager   ip [ host="localhost"   port=8076 ]  -standalone //includes  mbotmanager
 
 QActor testeruser1 context ctxTesterUser1 -g cyan  { 
  	Plan init normal [ 
  		actorOp getName ;		     
    	[?? actorOpDone(OP,R) ] println( myname( R ) ) 
    ]        
 	switchTo  doRequest   	
    	
    Plan doRequest[
		println("testerUser1 emits request");
		//explicit interaction with  mbotmanager in ctxMbotManager
		sendto mbotmanager in ctxMbotManager -m   bookingRequest : bookingRequest( true )
    ]
    transition stopAfter 600000
    	whenMsg bookingRequestAnswer -> handleAnswer

    Plan handleAnswer [
		println("testerUser1 handleAnswer");
    	printCurrentMessage;
    	onMsg bookingRequestAnswer : bookingRequestAnswer( failure ) -> 
    		selfMsg failure : failure( notoken ) ;
    	onMsg bookingRequestAnswer : bookingRequestAnswer( token(TK) )      -> 
    		selfMsg usage : usage( token(TK) )
    ] 
	switchTo nextStep

/*
 * Business logic  
 */	
    Plan nextStep [
		println("testerUser1 nextStep") 
    ]
    transition stopAfter 600000
    	whenMsg usage    -> usage,
    	whenMsg failure  -> waitForNotification,
    	whenMsg tryagain -> init
		
	Plan usage[
		println("testerUser1 usage");
		onMsg usage : usage( token(TK) ) -> addRule token( TK ) ;
		[ !? token( TOKEN ) ]  //explicit interaction with  mbotmanager in ctxMbotManager
			sendto mbotmanager in ctxMbotManager -m  getRobotDriveInterface : getRobotDriveInterface( TOKEN ) ;
		delay 4000
	]
	switchTo release
	
	Plan release[
		println("testerUser1 release");
		[ ?? token( TOKEN ) ]  //explicit interaction with  mbotmanager in ctxMbotManager
 			sendto mbotmanager in ctxMbotManager -m  bookingRelease : bookingRelease( TOKEN ) ;
		println("testerUser1 ENDS");
		delay 6000000
	]
	 
	Plan waitForNotification[
		println("testerUser1 waitForNotification")
	]
	transition stopAfter 600000
		whenEvent notify  ->  lookAtNotification  
	 
	Plan lookAtNotification[
		println("testerUser1 lookAtNotification");
		onEvent notify : notify( available ) -> 
			selfMsg tryagain : tryagain( true);
		onEvent notify : notify( removed  ) -> addRule endOfJob 
	]
	switchTo [ not !? endOfJob ] nextStep
 }
 
 /*
  * A dynamic actor can send messages, but cannot receive reply
  */
// QActor another context ctxTesterMbotResourceManager {
//  	Plan init normal [  
//  		delay 1000;     
//      	actorOp createNewActor("another", "it.unibo.testerUser1.Testermbotmanager")
//    ]      
//}