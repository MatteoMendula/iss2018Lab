/* Generated by AN DISI Unibo */ 
package it.unibo.qarescuer;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractQarescuer extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractQarescuer(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qarescuer/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/qarescuer/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitStartEvent",waitStartEvent);
	    	stateTab.put("waitRescuerID",waitRescuerID);
	    	stateTab.put("waitPatientID",waitPatientID);
	    	stateTab.put("showData",showData);
	    	stateTab.put("abortState",abortState);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qarescuer tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"start!\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?address(android,IP,PORT)" )) != null ){
	    	parg = "initConnectionWithAndroid(\"proximaApp\",IP,PORT)"; 
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	actorOpExecute(parg, false);	//OCT17		 
	    	}
	    	//switchTo waitStartEvent
	        switchToPlanAsNextState(pr, myselfName, "qarescuer_"+myselfName, 
	              "waitStartEvent",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitStartEvent = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitStartEvent",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitStartEvent";  
	    	temporaryStr = "\"wait start event\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"qarescuer_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitRescuerID") }, 
	          new String[]{"true","E","startEvent" },
	          10000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitStartEvent){  
	    	 println( getName() + " plan=waitStartEvent WARNING:" + e_waitStartEvent.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitStartEvent
	    
	    StateFun waitRescuerID = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitRescuerID",-1);
	    	String myselfName = "waitRescuerID";  
	    	temporaryStr = "\"wait rescuer ID\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("startEvent");
	    	if( currentEvent != null && currentEvent.getEventId().equals("startEvent") && 
	    		pengine.unify(curT, Term.createTerm("startEvent")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "sendMessageToAndroid(\"transition(readRescuerId)\")"; //it.unibo.xtext.qactor.impl.EventTransSwitchImpl@3f05119c
	    			{/* ActorOp */
	    			parg =  updateVars( Term.createTerm("startEvent"), 
	    				                Term.createTerm("startEvent"), 
	    				                Term.createTerm(currentEvent.getMsg()), parg);
	    			if(parg != null) actorOpExecute(parg, false); //JUNE2017 OCT17
	    			}
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"qarescuer_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitPatientID"), stateTab.get("abortState") }, 
	          new String[]{"true","E","nfc", "true","E","abort" },
	          10000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitRescuerID){  
	    	 println( getName() + " plan=waitRescuerID WARNING:" + e_waitRescuerID.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitRescuerID
	    
	    StateFun waitPatientID = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitPatientID",-1);
	    	String myselfName = "waitPatientID";  
	    	temporaryStr = "\"wait patient ID\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("nfc(X)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("nfc") && 
	    		pengine.unify(curT, Term.createTerm("nfc(CONTENT)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="rescuerID(X)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("nfc(CONTENT)"),  Term.createTerm("nfc(X)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	parg = "sendMessageToAndroid(\"transition(readPatientId)\")"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	//bbb
	     msgTransition( pr,myselfName,"qarescuer_"+myselfName,false,
	          new StateFun[]{stateTab.get("showData"), stateTab.get("abortState") }, 
	          new String[]{"true","E","nfc", "true","E","abort" },
	          10000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitPatientID){  
	    	 println( getName() + " plan=waitPatientID WARNING:" + e_waitPatientID.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitPatientID
	    
	    StateFun showData = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("showData",-1);
	    	String myselfName = "showData";  
	    	temporaryStr = "\"show data\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("nfc(X)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("nfc") && 
	    		pengine.unify(curT, Term.createTerm("nfc(CONTENT)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="patientID(X)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("nfc(CONTENT)"),  Term.createTerm("nfc(X)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?getData(R,P)" )) != null ){
	    	parg = "sendMessageToAndroid(showData(R,P))"; 
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	actorOpExecute(parg, false);	//OCT17		 
	    	}
	    	temporaryStr = "rescuerID(_)";
	    	removeRule( temporaryStr );  
	    	temporaryStr = "patientID(_)";
	    	removeRule( temporaryStr );  
	    	//switchTo waitStartEvent
	        switchToPlanAsNextState(pr, myselfName, "qarescuer_"+myselfName, 
	              "waitStartEvent",false, false, null); 
	    }catch(Exception e_showData){  
	    	 println( getName() + " plan=showData WARNING:" + e_showData.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//showData
	    
	    StateFun abortState = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("abortState",-1);
	    	String myselfName = "abortState";  
	    	temporaryStr = "\"aborting...\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("abort");
	    	if( currentEvent != null && currentEvent.getEventId().equals("abort") && 
	    		pengine.unify(curT, Term.createTerm("abort")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "sendMessageToAndroid(\"transition(start)\")"; //it.unibo.xtext.qactor.impl.EventTransSwitchImpl@5c2350dd
	    			{/* ActorOp */
	    			parg =  updateVars( Term.createTerm("abort"), 
	    				                Term.createTerm("abort"), 
	    				                Term.createTerm(currentEvent.getMsg()), parg);
	    			if(parg != null) actorOpExecute(parg, false); //JUNE2017 OCT17
	    			}
	    	}
	    	//switchTo waitStartEvent
	        switchToPlanAsNextState(pr, myselfName, "qarescuer_"+myselfName, 
	              "waitStartEvent",false, false, null); 
	    }catch(Exception e_abortState){  
	    	 println( getName() + " plan=abortState WARNING:" + e_abortState.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//abortState
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
