/* Generated by AN DISI Unibo */ 
package it.unibo.roveragent;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRoveragent extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRoveragent(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/roveragent/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/roveragent/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("goAhead",goAhead);
	    	stateTab.put("handleRobotSonarDetect",handleRobotSonarDetect);
	    	stateTab.put("handleRobotRealSonar",handleRobotRealSonar);
	    	stateTab.put("avoidRealObstacle",avoidRealObstacle);
	    	stateTab.put("handleSonar",handleSonar);
	    	stateTab.put("takeData",takeData);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "roveragent tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"rovercontroller STARTS\"";
	    	println( temporaryStr );  
	    	//switchTo goAhead
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "goAhead",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun goAhead = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goAhead",-1);
	    	String myselfName = "goAhead";  
	    	temporaryStr = "\"rovercontroller going forward \"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"roveragent_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleRobotSonarDetect"), stateTab.get("handleRobotRealSonar"), stateTab.get("handleSonar") },//new StateFun[]
	          new String[]{"true","E","sonarDetect", "true","E","realSonar", "true","E","sonar" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_goAhead){  
	    	 println( getName() + " plan=goAhead WARNING:" + e_goAhead.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goAhead
	    
	    StateFun handleRobotSonarDetect = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleRobotSonarDetect",-1);
	    	String myselfName = "handleRobotSonarDetect";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveBackward)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(300,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleRobotSonarDetect";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveStop)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo goAhead
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "goAhead",false, false, null); 
	    }catch(Exception e_handleRobotSonarDetect){  
	    	 println( getName() + " plan=handleRobotSonarDetect WARNING:" + e_handleRobotSonarDetect.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleRobotSonarDetect
	    
	    StateFun handleRobotRealSonar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleRobotRealSonar",-1);
	    	String myselfName = "handleRobotRealSonar";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(D)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("realSonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="realDistance(D)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("sonar(DISTANCE)"),  Term.createTerm("sonar(D)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//switchTo avoidRealObstacle
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "avoidRealObstacle",false, false, " !?foundObstacle"); 
	    }catch(Exception e_handleRobotRealSonar){  
	    	 println( getName() + " plan=handleRobotRealSonar WARNING:" + e_handleRobotRealSonar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleRobotRealSonar
	    
	    StateFun avoidRealObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("avoidRealObstacle",-1);
	    	String myselfName = "avoidRealObstacle";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveBackward)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "avoidRealObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveStop)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo goAhead
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "goAhead",false, false, null); 
	    }catch(Exception e_avoidRealObstacle){  
	    	 println( getName() + " plan=avoidRealObstacle WARNING:" + e_avoidRealObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//avoidRealObstacle
	    
	    StateFun handleSonar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSonar",-1);
	    	String myselfName = "handleSonar";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveStop)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"handleSonar\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveForward)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleSonar";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(moveStop)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(SONAR,TARGET,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(SONAR,TARGET,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "rrrrrrrrr(SONAR,TARGET,DISTANCE)";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), 
	    			                    Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) println( parg );
	    	}
	    	//switchTo takeData
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "takeData",false, false, null); 
	    }catch(Exception e_handleSonar){  
	    	 println( getName() + " plan=handleSonar WARNING:" + e_handleSonar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSonar
	    
	    StateFun takeData = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("takeData",-1);
	    	String myselfName = "takeData";  
	    	temporaryStr = "\"rover turnLeft\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(turnLeft)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "takeData";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"rover turnRight\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(turnRight)", guardVars ).toString();
	    	sendExtMsg("moveRover","rover", "ctxMbotExecutor", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "takeData";
	    	if( ! aar.getGoon() ) return ;
	    	//switchTo goAhead
	        switchToPlanAsNextState(pr, myselfName, "roveragent_"+myselfName, 
	              "goAhead",false, false, null); 
	    }catch(Exception e_takeData){  
	    	 println( getName() + " plan=takeData WARNING:" + e_takeData.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//takeData
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
