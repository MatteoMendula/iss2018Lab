/* 
 * ==============================================================
 * mbotAgent.qa
 * A robot that is able to move and to react to events
 * ==============================================================
 */   
System mbotAgent             
Event sonar  	  : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar   : sonar( DISTANCE )				//From real sonar on real robot
 
Dispatch moveRover : cmd( CMD )   					//from usercmdmanager
 
Context ctxMbotAgent    ip [ host="localhost"   port=8039 ]  -g yellow  //192.168.43.229
Context ctxRadarBase    ip [ host="localhost"    port=8033 ]  -standalone 
Context ctxMbotExecutor ip [ host="localhost"    port=8029 ]  -standalone   //192.168.43.67
      
QActor roveragent context ctxMbotAgent{
 	     
	Plan init normal [  
		println("rovercontroller STARTS") 		
	]  
	switchTo goAhead
	
	Plan goAhead[
		println("rovercontroller going forward ") 
//		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveForward);
	]
	transition stopAfter 600000  
 		whenEvent sonarDetect -> handleRobotSonarDetect ,
		whenEvent realSonar   -> handleRobotRealSonar ,
		whenEvent sonar       -> handleSonar  
	
	//Move back, far from the obstacle  	  
	Plan handleRobotSonarDetect   [
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveBackward);
		delay 300;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveStop)
	]
	switchTo goAhead //TODO 
	 
	Plan handleRobotRealSonar [
   		onEvent realSonar :  sonar( D ) -> addRule realDistance(D)   		
	]
	switchTo [ !? foundObstacle ]  avoidRealObstacle
	
	Plan avoidRealObstacle  [ 
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveBackward);
		delay 800;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveStop)
	]
	switchTo goAhead  //TODO  
	
	/*
	 * NOTE: The robot could moving either forward or backward
	 * Move avatar out of sonar range
	 *  
	 */
 	Plan handleSonar   [     
// 		printCurrentEvent ;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveStop) ;
		println("handleSonar") ;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveForward);
		delay 500;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(moveStop) ;
		onEvent sonar : sonar(SONAR, TARGET, DISTANCE) -> println( rrrrrrrrr(SONAR, TARGET, DISTANCE) )
	]     
	switchTo takeData    
	   
	Plan takeData[ 
		//printCurrentEvent ;  //here null
		println("rover turnLeft") ;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(turnLeft) ;
		delay 1000;
		println("rover turnRight") ;
		sendto rover in ctxMbotExecutor -m moveRover : cmd(turnRight);
		delay 1000
	]
	switchTo goAhead
}


//	Plan explore[
//		//printCurrentEvent ;  //here null
//		println("explore after rover sonar") ;
//		sendto rover in ctxMbotExecutor -m moveRover : cmd(turnRight) ;
//		delay 1000;
//		sendto rover in ctxMbotExecutor -m moveRover : cmd(turnLeft) ;  //here we could find a hole
//		delay 1000
//	]
//	transition whenTime 100 -> endExplore
// 		whenEvent sonarDetect -> explore   
////		whenEvent realSonar   -> handleRobotRealSonar ,
//	Plan endExplore[
//		println("found HOLE") 
//	]
 		
