System console

Dispatch consoleCmdMsg : consoleCmd ( X )
Dispatch frontendCmdMsg : frontendCmd (X)
Dispatch startTempMsg : startTemp (X)
Dispatch tempStateMsg : tempState (X)

Context ctxConsole ip [ host="localhost" port=8029 ]
Context ctxRobot ip [ host="localhost" port=8030 ] -standalone 


QActor mvccontroller context ctxConsole {
	
	Plan init normal[ 
		println("MVCCONTROLLER starts...")
	] 
	switchTo waitCommand
	
	Plan waitCommand[]
	transition stopAfter 600000
		whenMsg frontendCmdMsg -> checkConditions,
		whenMsg tempStateMsg -> sendStop
	
	Plan checkConditions [
		println("MVCCONTROLLER conditions valid and start from FRONTEND");
		forward tempdetector -m startTempMsg : startTemp (x) //assuming that condition is already verified for the first time
	]
	switchTo sendStart
	
	Plan sendStart[
		println("MVCCONTROLLER send start to robot...");
		sendto player in ctxRobot -m consoleCmdMsg : consoleCmd(start);
		delay 1000
	]
	switchTo waitCommand
	
	Plan sendStop[
		println("MVCCONTROLLER send stop to robot...");
		sendto player in ctxRobot -m consoleCmdMsg : consoleCmd(halt)
	]
	switchTo end
	
	Plan end[
		println("MVCCONTROLLER ends...")
	]

}

QActor tempdetector context ctxConsole {
	
	Plan init normal[ 
		println("TEMPDETECTOR starts...");
		delay 20000
	]
	switchTo waitCommand
	
	Plan waitCommand[]
	transition stopAfter 600000
		whenMsg startTempMsg -> sendTempKO
	
	Plan sendTempKO[
		println("TEMPDETECTOR temperature raises over the limit! Event!");
		forward mvccontroller -m tempStateMsg : tempState(false)
	]
	switchTo end
	
	Plan end[
		println("TEMPDETECTOR ends...")
	]
	
}