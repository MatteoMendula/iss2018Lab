/*
 * This is A MODEL, discussed  3 April 2018
 *  sensor   = temperature
 *  actuator = led
 */  
System bls1  
  
Event sensorEvent : sensorEvent( DATA )	//DATA : integer
Event ctrlEvent   : ctrlEvent( CMD )  	//CMD = on | off 

Context bls1Ctx ip [ host="localhost"  port=8019 ]    

/*
 * SENSOR as event emitter
 */ 
QActor qasensor context bls1Ctx {
	Plan init normal  [   
		println( qasensor(starts)  );   
		delay 1000;
		emit  sensorEvent :  sensorEvent( 20 ) ; 
		delay 1000;
		emit  sensorEvent :  sensorEvent( 30 ) ; 
		delay 1000;
		emit  sensorEvent :  sensorEvent( 28 ) ; 
		delay 1000;
		emit  sensorEvent :  sensorEvent( 35 ) ; 
		delay 1000
    ]
}

/*
 * CONTROL rule-based
 * turns a led on when the sensor value is higher than 30
 * by emitting a ctrlEvent
 */
QActor qacontrol context bls1Ctx{
Rules{
	eval( ge, X, X ).
	eval( ge, X, V ):- eval( gt, X , V ) .
 	evalTemperature( cold ) :- 		
		curTemperatureValue(V),
		//output(evalTemperature(V)),
		eval( lt, V , 30 ).
 	evalTemperature( hot ) :-
		curTemperatureValue(V),
		//output(evalTemperature(V)),
		eval( ge, V , 30 ), !.	
 }
	Plan init normal [         
   		println( qacontrol(starts)  )   
   	]
   	switchTo waitForSensorEvent      
 
    Plan waitForSensorEvent[  ]  
    transition stopAfter 100000 
     	whenEvent sensorEvent -> handleSensorEvent
    finally repeatPlan	
      
    Plan handleSensorEvent resumeLastPlan [   
     	printCurrentEvent;  
    	onEvent sensorEvent : sensorEvent( V ) -> 
    				ReplaceRule curTemperatureValue(X)  with curTemperatureValue(V); 
    	[ !? evalTemperature(hot)  ] emit ctrlEvent : ctrlEvent(on) else emit ctrlEvent : ctrlEvent(off) 
    ]
}
/*
 * ACTUATOR
 * manage a Led by USING a Led implementation
 */
QActor qaactuator context bls1Ctx{
	Plan init normal [         
   		println( qaactuator(starts)  ) ;
   		javaRun it.unibo.custom.gui.customBlsGui.createCustomLedGui()   
   	]
   	switchTo waitForCommand     
  
    Plan waitForCommand[  ]  
    transition stopAfter 100000 
     	whenEvent ctrlEvent -> handleCmd
    finally repeatPlan	
   	 
	Plan handleCmd resumeLastPlan[
// 		printCurrentEvent;
		onEvent ctrlEvent : ctrlEvent(on)  -> javaRun it.unibo.custom.gui.customBlsGui.setLed("on");
		onEvent ctrlEvent : ctrlEvent(off) -> javaRun it.unibo.custom.gui.customBlsGui.setLed("off")
	]
}