/* 
 * =======================================================================================
 * mmon.qa
 * This is a model of the LOGICAL ARCHITECTURE of the system
 * This is NOT the project architecture
 * =======================================================================================
 */    
System mmon                
Event usercmd      : usercmd(CMD)  					//from web gui

Event updatedInfo    : updatedInfo( PAYLOAD ) //PAYLOAD = ....

Dispatch operatorCmd : operatorCmd(PARAMS) 
Dispatch machineCmd  : machineCmd(PARAMS) 
Dispatch machineMsg  : machineMsg(PARAMS) 
Dispatch euromap63   : euromap63(CMD) 

pubSubServer  "tcp://localhost:1883" 

Context ctxMmon ip [ host="localhost"   port=8062 ]  -httpserver     

QActor operatorconsole context ctxMmon -pubsub   {
	Plan init normal [  
		println("operatorconsole starts")
	]
	switchTo simulate
	
	Plan simulate[
		println("operatorconsole send a command");
		forward orchestrator  -m operatorCmd : operatorCmd(acmd) 
	]
}

/*
 * This is the CORE of the system, that includes (ALL) the business logic
 * The MMON database should be here
 * Can emit updatedInfo ---> 
 */
QActor orchestrator context ctxMmon -pubsub  -g cyan  {  
	Plan init normal [  
		println("orchestrator starts")
	]
	transition stopAfter 600000
	whenMsg operatorCmd -> handleOperatorCmd,
	whenMsg machineMsg -> handleMachineMsg
	finally repeatPlan
	
	Plan handleOperatorCmd resumeLastPlan[
		println("handleOperatorCmd");
		printCurrentMessage ;
		//Elaborate the command and send a command to the machine
		onMsg operatorCmd : operatorCmd(CMD) ->
				forward presslogical -m machineCmd : machineCmd(CMD)
		
	]
	Plan handleMachineMsg resumeLastPlan[
		println("handleMachineMsg");
		printCurrentMessage ;
		onMsg machineMsg : machineMsg(P) -> emit updatedInfo : updatedInfo(P)
	]
}

QActor elabactor context ctxMmon  {  
	Plan init normal [  
		println("elabactor starts")
	]
	transition stopAfter 600000
	whenEvent updatedInfo -> handleUpdatedInfo 
	finally repeatPlan
	
	Plan handleUpdatedInfo resumeLastPlan[		
		println("handleUpdatedInfo ");
		printCurrentEvent
	]
}



/*
 * Converts command to the press language (euromap63)
 */
QActor presslogical context ctxMmon  -g yellow  {  
	Plan init normal [  
		println("presslogical starts. INTERACTS via EUROMAP63 / 77 or NOCDLL")
	]
	transition stopAfter 600000
	whenMsg machineCmd -> handleMachineCmd
	finally repeatPlan
	
	Plan handleMachineCmd resumeLastPlan[
		println("handleMachineCmd");
		printCurrentMessage ;
		onMsg machineCmd : machineCmd(CMD) ->
			forward pressphysicalsimulator -m euromap63 : euromap63(CMD) 
	]
	
}

QActor pressphysicalsimulator context ctxMmon  -g green  { 
	Plan init normal [  
		println("pressphysical starts")
	]
	transition stopAfter 600000
  	whenMsg euromap63 : euromap63(CMD) do println( pressphysicalsimulator(CMD))
	finally repeatPlan

	
}
