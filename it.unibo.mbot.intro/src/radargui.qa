/*        
 * ==============================================================
 * radargui.qa       
 * ==============================================================
 */            
System radargui                      
Event local_radarReady  : radargui( STATE )  		//STATE = ready|off
Event polar             : p( Distance, Angle  )  	 
Dispatch polarMsg       : p( Distance, Angle  )      
   
Context  ctxRadarBase ip [ host="localhost"  port=8033 ]     
       
QActor radarguibase context ctxRadarBase  {   	  	  
    Plan init normal [            
        println("RADAR init the GUI ... ") ;     
		javaRun  it.unibo.radar.common.radarSupport.setUpRadarGui();  
/*R01*/ emit  local_radarReady : radargui( ready )  
	]
    switchTo waitDataToShow    
        
    Plan waitDataToShow [ ]     
 /*R1*/ transition stopAfter 86400000  //one day	
	    whenEvent polar   -> handleData ,
 		whenMsg  polarMsg -> handleData 			
        finally repeatPlan       
	     
	Plan handleData resumeLastPlan [
 		printCurrentMessage ;     
 		printCurrentEvent ;   
/*R2*/  onMsg  polarMsg : p(D,A) ->  javaRun it.unibo.radar.common.radarSupport.sendDataToGui(D,A);  
		onEvent polar   : p(D,A) ->  javaRun it.unibo.radar.common.radarSupport.sendDataToGui(D,A)   
	]  
}
/*
 * ----------------------------------------------------
 * Introduced for testing 
 * ----------------------------------------------------
 */
QActor tester  context ctxRadarBase {	   
Rules{
	p(80,0). 
	p(80,30).
	p(30,50).
	p(80,60).
	p(60,70).
	p(80,90).
	p(80,160).
	p(10,130).
	p(80,150).
	p(80,180).
} 
	Plan init normal [       
		println("tester STARTS ")     
  	]
 	transition stopAfter 86400000  //one day
		whenEvent local_radarReady  -> dotest  
 	Plan dotest resumeLastPlan [		
		delay  1000 ; 
   		[ ?? p(X,Y) ] forward radarguibase -m polarMsg : p(X,Y) else endPlan "testDone" ;
	  	[ ?? p(X,Y) ] emit polar : p(X,Y) else endPlan "testDone"
 	]
 	finally repeatPlan
}


