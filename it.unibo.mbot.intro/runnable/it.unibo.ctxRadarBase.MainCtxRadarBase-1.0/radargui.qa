/*        
 * ==============================================================
 * radargui.qa       
 * ==============================================================
 */            
System radargui                      
Event radarReady     : radargui( STATE )  		//STATE = ready|off
Event polar          : p( Distance, Angle  )  	//emitted by the plant (on Raspberry)
Event alarm          : alarm( obstacle, p( Distance, Angle  ) )
Dispatch polarMsg    : p( Distance, Angle  )    //forwarded by the tester      
   
Context  ctxRadarBase    ip [ host="localhost"  port=8033 ]  
EventHandler evh for alarm -print ;  
       
QActor radarguibase context ctxRadarBase  {   	  	
Rules{   
	checknear( D,A ) :- actorPrintln( checknear(D,A) ), //output( checknear(D,A) )
						eval( lt, D, 40 ). 
}    
    Plan init normal [            
        println("RADAR init the GUI ... ") ;     
		javaRun  it.unibo.radar.common.radarSupport.setUpRadarGui();  
/*R01*/ emit  radarReady : radargui( ready )  
	]
    switchTo waitSonarInfo    
        
    Plan waitSonarInfo [ ]     
 /*R1*/ 		
 	 transition stopAfter 86400000  //one day	
	    whenEvent polar   -> handleSonarInfo ,
 		whenMsg  polarMsg -> handleSonarInfo 			
        finally repeatPlan       
	     
	Plan handleSonarInfo resumeLastPlan [
 		printCurrentMessage ;     
 		printCurrentEvent ;   
/*R2*/  onMsg  polarMsg : p(D,A) ->  javaRun it.unibo.radar.common.radarSupport.sendDataToGui(D,A);  
		onEvent polar   : p(D,A) ->  javaRun it.unibo.radar.common.radarSupport.sendDataToGui(D,A)   
// 		onMsg polarMsg : p(D,A)  ->  demo checknear(D,A);
//  		onEvent polar  : p(D,A)  ->  demo checknear(D,A);
   		//[ !? goalResult(checknear(D,A))]   sound time(5500) file('./audio/tada2.wav') -asynch ;
/*R3*/	//[ ?? goalResult(checknear(D,A))  ] emit alarm : alarm( obstacle, p( D,A) )
	] 
	//WARNING: a switchTo clean currentMessage and currentEvent 

  
//	switchTo checkObstacle     
         
//    Plan checkObstacle resumeLastPlan [
//    	println("checkObstacle ... ") ; 
// 		onMsg polarMsg : p(D,A) -> demo checknear(D,A);
//  		onEvent polar  : p(D,A) -> demo checknear(D,A);
//   		//[ !? goalResult(checknear(D,A))]   sound time(5500) file('./audio/tada2.wav') -asynch ;
///*R3*/	[ ?? goalResult(checknear(D,A))  ] emit alarm : alarm( obstacle, p( D,A) )
//	]
}
/*
 * ----------------------------------------------------
 * Introduced for testing 
 * ----------------------------------------------------
 */
QActor tester  context ctxRadarBase {	   
Rules{
	p(80,0). 
	p(80,30).
	p(30,50).
	p(80,60).
	p(60,70).
	p(80,90).
	p(80,160).
	p(10,130).
	p(80,150).
	p(80,180).
} 
	Plan init normal [       
		println("tester STARTS ")     
  	]
 	transition stopAfter 86400000  //one day
		whenEvent radarReady  -> dotest  
 	Plan dotest resumeLastPlan [		
		delay  1000 ; 
   		[ ?? p(X,Y) ] forward radarguibase -m polarMsg : p(X,Y) else endPlan "testDone"
//  	[ ?? p(X,Y) ] emit polar : p(X,Y) else endPlan "testDone"
 	]
 	finally repeatPlan
}


