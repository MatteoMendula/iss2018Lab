/* 
 * =======================================================================================
 * realRobotWithLedExecutor.qa
 * =======================================================================================
 */        
System realRobotWithLedExecutor            
Event usercmd     : usercmd(CMD)  					//from web gui
Event sonar  	  : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar   : sonar( DISTANCE )				//From real sonar on real robot
Event    polar    : p( Distance, Angle )  
Event mindcmd     : usercmd(CMD) 				//from the appl agent (the 'mind')
Event mbotcmd     : usercmd(CMD)    

Dispatch moveMbot : usercmd( CMD )
  
Context ctxRealRobotWithLedExecutor ip [ host="192.168.43.68"   port=8019 ] -httpserver     
EventHandler evh for usercmd , mindcmd -print {	//event-driven
 	forwardEvent mbotled -m moveMbot  	//from event to message     
};
Context ctxRadarBase    ip [ host="192.168.43.229"   port=8033 ]  -standalone 	 
  
QActor mbotled context ctxRealRobotWithLedExecutor {   
	Plan init normal [       
 	    javaRun it.unibo.mbot.mbotConnArduino.initRasp();
 	    javaOp  "customExecute ( \"sudo bash led25GpioTurnOn.sh\" )" ;
 	    delay 500;
	    javaOp  "customExecute ( \"sudo bash led25GpioTurnOff.sh\" )" ;
 	    delay 500;
	    javaOp  "customExecute ( \"sudo bash led25GpioTurnOn.sh\" )" ;
 	    delay 500;
	    javaOp  "customExecute ( \"sudo bash led25GpioTurnOff.sh\" )" ;
	    println("mbot START")    
  	]   
    switchTo waitForCmd             
		
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg moveMbot   -> execMove 
   	finally repeatPlan      
	   
  	Plan execMove resumeLastPlan[     
   		javaOp  "customExecute ( \"sudo bash led25GpioTurnOn.sh\" )" ;			
  		printCurrentMessage;
     	onMsg moveMbot : usercmd( robotgui(h(X)) )  -> {
      		javaOp  "customExecute ( \"sudo bash led25GpioTurnOff.sh\" )" ;
     		javaRun it.unibo.mbot.mbotConnArduino.mbotStop()  
     	};
  		onMsg moveMbot : usercmd( robotgui(w(X)) )  -> javaRun it.unibo.mbot.mbotConnArduino.mbotForward();    
    	onMsg moveMbot : usercmd( robotgui(s(X)) )  -> javaRun it.unibo.mbot.mbotConnArduino.mbotBackward(); 
  		onMsg moveMbot : usercmd( robotgui(a(X)) )   -> {
  			javaRun it.unibo.mbot.mbotConnArduino.mbotLeft();
			delay 680;	//TODO: use some configuration parameter
       		javaOp  "customExecute ( \"sudo bash led25GpioTurnOff.sh\" )" ;
 			javaRun it.unibo.mbot.mbotConnArduino.mbotStop()				
  		};    
   		onMsg moveMbot : usercmd( robotgui(d(X)) )  -> {
			javaRun it.unibo.mbot.mbotConnArduino.mbotRight();
			delay 680;//TODO: use some configuration parameter
      		javaOp  "customExecute ( \"sudo bash led25GpioTurnOff.sh\" )" ;
	 		javaRun it.unibo.mbot.mbotConnArduino.mbotStop()   			
   		}  ;   
    	onMsg moveMbot : usercmd( robotgui(f(X)) )  -> javaRun it.unibo.mbot.mbotConnArduino.mbotLinefollow()     
   	]           
}  

/*
 * -----------------------------------------------------
 * Convert sonar events into polar events
 * -----------------------------------------------------
 */
QActor sonardetector context ctxRealRobotWithLedExecutor{
	Plan init normal [
//		println("sonardetector WAITS ")
	]
  	transition stopAfter 3600000   	//1h     
  		whenEvent realSonar   : sonar( DISTANCE ) do emit polar : p(DISTANCE, 0) 
  	finally repeatPlan  
}