/* 
 * =======================================================================================
 * virtualRobotExecutor.qa
 * =======================================================================================
 */          
System virtualRobotExecutor                
Event usercmd     : usercmd(CMD)  					//from web gui
Event sonar  	  : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event realSonar   : sonar( DISTANCE )				//From real sonar on real robot
Event    polar    : p( Distance, Angle )  
Event mindcmd     : usercmd(CMD) 
      
Dispatch moveRover : usercmd( CMD )   					   
     
Context ctxVirtualRobotExecutor ip [ host="192.168.43.229"   port=8029 ] -g cyan -httpserver     
EventHandler evh for usercmd, mindcmd -print {	//event-driven ; no Mqtt support yet
 	forwardEvent rover -m moveRover  	//from event to message
};  
Context ctxRadarBase    ip [ host="192.168.43.229"   port=8033 ]  -standalone 	 
 
/*       
 * -----------------------------------------------------
 * The rover is a an interpreter of command messages
 * -----------------------------------------------------
 */  
QActor rover context ctxVirtualRobotExecutor {   
	Rules{	    
		unityConfig("unityStart.bat").    //(1) for testing
 	}
	Plan init normal [  println("rover START")   ] 
    switchTo waitForCmd            
		 
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
  		whenMsg moveRover   -> execMove  	  
 	finally repeatPlan 
 	  
  	Plan execMove resumeLastPlan[    
  		printCurrentMessage;    
    	onMsg moveRover : usercmd( robotgui(h(X)) )    -> stop 40 time(0) ;       
    	onMsg moveRover : usercmd( robotgui(w(X)) )    -> onward 40 time(0) ;  //0 means asynch
    	onMsg moveRover : usercmd( robotgui(s(X)) )    -> backwards 40 time(0) ;
  		onMsg moveRover : usercmd( robotgui(a(X)) )    -> left 40 time(750)  ;   
   		onMsg moveRover : usercmd( robotgui(d(X)) )    -> right 40 time(750) ;   
   		onMsg moveRover : usercmd( robotgui(x(X)) )    -> { actorOp terminateSystem() }; //TODO
    	onMsg moveRover :  usercmd( robotgui(unityAddr(X)) ) -> {   
   			[ not !? unityOn ] { 		
   				 println("create Unity  and connect  ");	    	 
	     		 [ !? unityConfig( BATCH) ]  //Unity is on the current host
	     		 		javaRun it.unibo.utils.external.connectRoverToUnity(BATCH);
	  		 	 addRule unityOn ;
	  		 	 //setAvatarInitialPosition
      	 		 backwards 70 time ( 1000 ) ;    	    
   	     	     right     70 time ( 1000 )      		  
    	    } else println("UNITY ALREADY ACTIVATED")	
    	}	    
   	]        
}  

/*
 * -----------------------------------------------------
 * Convert sonar events into polar events
 * -----------------------------------------------------
 */
QActor sonardetector context ctxVirtualRobotExecutor{
	Plan init normal [
		println("sonardetector STARTS ")
	]
	switchTo waitForEvents 
	 
	Plan waitForEvents[ ]    
  	transition stopAfter 3600000   	//1h     
 		whenEvent sonar       ->  sendToRadar,
  		whenEvent sonarDetect ->  showObstcle,
 		whenEvent realSonar   ->  handleRealSonar
  	finally repeatPlan       
	    
	Plan sendToRadar resumeLastPlan [      
  		printCurrentEvent; 		 
 		onEvent sonar  : sonar(sonar1, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,30);
 		onEvent sonar  : sonar(sonar2, TARGET, DISTANCE ) -> emit polar : p(DISTANCE,120) 
 	] 	
 	Plan handleRealSonar resumeLastPlan[ 
 		printCurrentEvent; 		
		onEvent realSonar   : sonar( DISTANCE ) -> emit polar : p(DISTANCE, 0) 
 	]
	Plan showObstcle resumeLastPlan[
		println( "found obstacle" );		
		emit polar : p(30,90)  
	]
}  

//Useful for testing
QActor polarlogagent context ctxVirtualRobotExecutor -g yellow {       
	Plan init normal [ printCurrentEvent	] 
	transition   stopAfter 600000 //10min         
    	whenEvent  polar : p( Distance, Angle ) do  addRule p( Distance, Angle ) //used in testing
    finally repeatPlan
}
